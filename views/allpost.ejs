<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Instagram Feed</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Billabong&display=swap');

    .instagram-logo {
      font-family: 'Billabong', cursive;
      font-size: 2.5rem;
      background: -webkit-linear-gradient(45deg, #f09433 0%, #e6683c 25%, #dc2743 50%, #cc2366 75%, #bc1888 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }
  </style>
</head>

<body class="bg-gray-900 text-white">
  <!-- Navbar -->
  <nav class="bg-gray-800 border-b border-gray-700 fixed top-0 w-full z-10">
    <div class="max-w-5xl mx-auto px-4">
      <div class="flex justify-between items-center h-16">
        <a href="/allpost" class="instagram-logo text-white">Instagram</a>

        <!-- Desktop Menu -->
        <div class="hidden md:flex items-center space-x-4">
          <a href="/allpost" class="text-gray-300 hover:text-white"><i class="fas fa-home text-2xl"></i></a>
          <a href="/explore" class="text-gray-300 hover:text-white"><i class="fas fa-compass text-2xl"></i></a>
          <a href="/chat-list" class="text-gray-300 hover:text-white"><i class="fas fa-paper-plane text-2xl"></i></a>
          <a href="/profile" class="text-gray-300 hover:text-white"><i class="fas fa-user-circle text-2xl"></i></a>
          <form action="/logout" method="get" class="inline">
            <button
              class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition duration-300">Logout</button>
          </form>
        </div>

        <!-- Hamburger Menu for Mobile -->
        <div class="md:hidden">
          <button id="menu-button" class="text-gray-300 hover:text-white focus:outline-none">
            <i class="fas fa-bars text-2xl"></i>
          </button>
        </div>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="hidden md:hidden">
      <div class="flex flex-col space-y-2 px-4 py-2 bg-gray-800 border-t border-gray-700">
        <a href="/allpost" class="text-gray-300 hover:text-white">Home</a>
        <a href="/explore" class="text-gray-300 hover:text-white">Explore</a>
        <a href="/chat-list" class="text-gray-300 hover:text-white">Chat</a>
        <a href="/profile" class="text-gray-300 hover:text-white">Profile</a>
        <form action="/logout" method="get" class="inline">
          <button
            class="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700 transition duration-300">Logout</button>
        </form>
      </div>
    </div>
  </nav>


  <!-- Main Content -->
  <main class="container mx-auto mt-20 px-4 max-w-2xl">
    <% allpost.forEach((post)=> { %>
      <div class="bg-gray-800 rounded-lg shadow-lg mb-8">
        <!-- Post Header -->
        <div class="flex items-center p-4">
          <div class="w-10 h-10 rounded-full overflow-hidden mr-3">
            <img src="<%= post.user.profilepic?.url || defaultProfilePic %>" alt="Profile picture"
              class="w-full h-full object-center"
              onerror="this.src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT5x4ugT-l8K56rUtVOPDhJam2Hp5sRLQtyVQ&s'">
          </div>
          <span class="font-semibold text-white cursor-default">
            <%= post.user.username %>

          </span>
        </div>

        <!-- Post Image Container -->
        <div class="w-full">
          <div class="relative w-full max-w-2xl mx-auto">
            <div class="rounded-lg overflow-hidden bg-gray-800">
              <img src="<%= post.postimg.url %>" alt="Post image" class="w-full object-contain"
                style="image-orientation: from-image;" />
            </div>
          </div>
        </div>

        <!-- Post Actions -->
        <div class="p-4">
          <div class="flex items-center space-x-4 mb-2">
            <button onclick="handleLike('<%= post._id %>')" class="text-2xl focus:outline-none">
              <i id="like-icon-<%= post._id %>"
                class="fas fa-heart <%= post.likes.includes(loginUser._id) ? 'text-red-500' : 'text-gray-300' %>">
              </i>
            </button>
            <button class="text-2xl text-gray-300 hover:text-white focus:outline-none"
              onclick="focusComment('<%= post._id %>')">
              <i class="fas fa-comment"></i>
            </button>
          </div>
          <p class="font-semibold">
            <span id="likes-count-<%= post._id %>">
              <%= post.likes.length %>
            </span> likes
          </p>
        </div>

        <!-- Post Content -->
        <div class="px-4 pb-2">
          <p><span class="font-semibold text-gray-400">
              @<%= post.user.username %>:
            </span>
            <span class="font-semibold text-gray-400">
              <%= post.content %>
            </span>
          </p>
        </div>

        <!-- Comments -->
        <div class="px-4 pb-4">
          <% if (post.comments.length> 0) { %>
            <button class="text-gray-400 hover:text-white mb-2" onclick="toggleComments('<%= post._id %>')">
              View all <%= post.comments.length %> comments
            </button>
            <% } %>
              <div id="comments-<%= post._id %>" class="hidden space-y-2">
                <% post.comments.forEach(comment=> { %>
                  <p class="text-sm">
                    <span class="font-semibold">
                      <%= comment.user.username %>:
                    </span>
                    <%= comment.content %>
                  </p>
                  <% }) %>
              </div>
              <form onsubmit="handleComment(event, '<%= post._id %>')" class="mt-2 flex items-center">
                <input type="hidden" name="postId" value="<%= post._id %>">
                <input type="text" name="comment" placeholder="Add a comment..."
                  class="flex-grow bg-transparent border-none focus:outline-none text-white"
                  id="comment-<%= post._id %>">
                <button type="submit" class="ml-2 text-blue-500 font-semibold">Post</button>
              </form>
        </div>
      </div>
      <% }) %>
  </main>

  <script>
    function toggleComments(postId) {
      const commentsDiv = document.getElementById(`comments-${postId}`);
      commentsDiv.classList.toggle('hidden');
    }

    function focusComment(postId) {
      document.getElementById(`comment-${postId}`).focus();
    }

    const menuButton = document.getElementById('menu-button');
    const mobileMenu = document.getElementById('mobile-menu');

    menuButton.addEventListener('click', () => {
      mobileMenu.classList.toggle('hidden');
    });

    // New function for handling likes
    async function handleLike(postId) {
      try {
        const response = await fetch(`/like/${postId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          const data = await response.json();
          const likeIcon = document.getElementById(`like-icon-${postId}`);
          const likesCount = document.getElementById(`likes-count-${postId}`);

          if (data.isLiked) {
            likeIcon.classList.remove('text-gray-300');
            likeIcon.classList.add('text-red-500');
          } else {
            likeIcon.classList.remove('text-red-500');
            likeIcon.classList.add('text-gray-300');
          }

          likesCount.textContent = data.likesCount;
        }
      } catch (error) {
        console.error('Error handling like:', error);
      }
    }

    // New function for handling comments
    async function handleComment(event, postId) {
      event.preventDefault();
      const form = event.target;
      const commentInput = form.querySelector(`#comment-${postId}`);
      const comment = commentInput.value;

      if (!comment.trim()) return;

      try {
        const response = await fetch('/addcomment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            postId,
            comment
          })
        });

        if (response.ok) {
          const data = await response.json();

          // Add new comment to UI
          const commentsContainer = document.getElementById(`comments-${postId}`);
          const newCommentElement = document.createElement('p');
          newCommentElement.className = 'text-sm';
          newCommentElement.innerHTML = `
            <span class="font-semibold">${data.username}:</span>
            ${data.content}
          `;
          commentsContainer.appendChild(newCommentElement);

          // Clear input
          commentInput.value = '';

          // Show comments if hidden
          commentsContainer.classList.remove('hidden');

          // Update comment count button
          const commentButton = commentsContainer.previousElementSibling;
          const commentCount = commentsContainer.children.length;
          if (commentButton && commentButton.tagName === 'BUTTON') {
            commentButton.textContent = `View all ${commentCount} comments`;
          }
        }
      } catch (error) {
        console.error('Error posting comment:', error);
      }
    }
  </script>
</body>

</html>